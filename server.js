// Generated by CoffeeScript 1.4.0
/*
 Module dependencies.
*/

var Comment, Schema, app, commentSchema, counter, express, io, mongoUri, mongoose, routes, slideKey, slideMap, socketIds;

express = require('express');

routes = require('./routes');

io = require('socket.io');

mongoose = require('mongoose');

app = module.exports = express.createServer();

counter = 0;

mongoUri = 'mongodb://127.0.0.1/nodeslide';

Schema = mongoose.Schema;

commentSchema = new Schema({
  slideno: Number,
  message: String,
  slideKey: String,
  x: Number,
  y: Number
});

slideKey = 'default';

socketIds = [];

slideMap = [];

app.configure(function() {
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express["static"](__dirname + '/public'));
  return mongoose.connect(mongoUri);
});

Comment = mongoose.model('Comment', commentSchema);

app.configure('development', function() {
  return app.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});

app.configure('production', function() {
  return app.use(express.errorHandler());
});

app.get('/favicon.ico', function(req, res) {
  return res.render('favicon.ico', {});
});

app.get('/:id?', function(req, res) {
  console.log(req.params.id);
  if (!req.params.id) {
    slideKey = 'default';
  } else {
    slideKey = req.params.id;
  }
  counter = slideMap[slideKey];
  if (!counter) {
    slideMap[slideKey] = 0;
  }
  if (slideKey !== 'default') {
    return res.render(slideKey, {
      slideId: slideKey
    });
  } else {
    return res.render('index', {
      slideId: 'default'
    });
  }
});

app.listen(process.env.PORT || 3001);

console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);

io = io.listen(app);

io.sockets.on('connection', function(socket) {
  socket.on('count up', function(data) {
    return socket.set('slideId', data.slideId, function() {
      var count;
      if (socketIds.indexOf(socket.id < 0)) {
        socketIds.push(socket.id);
        console.log(socket.id);
        count = slideMap[data.slideId];
        count++;
        slideMap[data.slideId] = count;
        return io.sockets.emit('counter', {
          count: count,
          slideId: data.slideId
        });
      }
    });
  });
  socket.on('disconnect', function() {
    var index;
    console.log('disconnect');
    index = socketIds.indexOf(socket.id);
    socketIds.splice(index, 1);
    return socket.get('slideId', function(err, slideId) {
      var count;
      if (!err) {
        console.log("slideId disconnect" + slideId);
        count = slideMap[slideId];
        count--;
        slideMap[slideId] = count;
        return io.sockets.emit('counter', {
          count: count,
          slideId: slideId
        });
      } else {
        return console.log(err);
      }
    });
  });
  Comment.find({
    slideKey: slideKey
  }, function(err, docs) {
    var doc, i, _i, _len, _results;
    if (!err) {
      i = 0;
      _results = [];
      for (_i = 0, _len = docs.length; _i < _len; _i++) {
        doc = docs[_i];
        console.log(doc);
        if (doc.message) {
          socket.emit('loaded', doc);
        } else {
          Comment.findById(doc.id, function(err, comment) {
            if (!err) {
              return comment.remove();
            } else {
              return console.log(err);
            }
          });
        }
        _results.push(i++);
      }
      return _results;
    } else {
      return console.log(err);
    }
  });
  socket.on('create', function(data) {
    var comment;
    console.log(data);
    if (data) {
      console.log("Data : %s", data.message);
      console.log("Data : %s", data.slideno);
      comment = new Comment();
      comment.slideno = data.slideno;
      comment.x = data.x;
      comment.y = data.y;
      comment.slideKey = slideKey;
      console.log(comment);
      return comment.save(function(err, doc) {
        console.log('saved: %s', doc.id);
        if (!err) {
          socket.emit('created', {
            id: doc.id,
            slideno: doc.slideno,
            x: doc.x,
            y: doc.y,
            slideKey: doc.slideKey
          });
          return socket.broadcast.emit('created by other', {
            id: doc.id,
            slideno: doc.slideno,
            x: doc.x,
            y: doc.y,
            slideKey: doc.slideKey
          });
        } else {
          return console.log(err);
        }
      });
    }
  });
  socket.on('text edit', function(data) {
    if (data && data.message) {
      return Comment.findById(data.id, function(err, comment) {
        if (!err) {
          if (data.message !== null) {
            comment.message = data.message;
          }
          return comment.save(function(err) {
            if (!err) {
              socket.emit('text edited', {
                id: comment.id,
                slideno: comment.slideno,
                x: comment.x,
                y: comment.y,
                message: comment.message,
                slideKey: comment.slideKey
              });
              return socket.broadcast.emit('text edited', {
                id: comment.id,
                slideno: comment.slideno,
                x: comment.x,
                y: comment.y,
                message: comment.message,
                slideKey: comment.slideKey
              });
            } else {
              return console.log(err);
            }
          });
        }
      });
    }
  });
  socket.on('delete', function(data) {
    console.log(data);
    if (data) {
      return Comment.findById(data.id, function(err, comment) {
        if (!err && comment) {
          comment.remove();
          socket.emit('deleted', {
            id: data.id
          });
          return socket.broadcast.emit('deleted', {
            id: data.id
          });
        } else {
          return console.log(err);
        }
      });
    }
  });
  socket.on('cancel', function(data) {
    if (data) {
      return Comment.findById(data.id, function(err, comment) {
        if (!err && comment) {
          comment.remove();
          return socket.broadcast.emit('cancelled', {
            id: data.id
          });
        } else {
          return console.log(err);
        }
      });
    }
  });
  return socket.on('update', function(data) {
    if (data) {
      return Comment.findById(data.id, function(err, comment) {
        if (!err && comment) {
          comment.x = data.x;
          comment.y = data.y;
          return comment.save(function(err) {
            if (!err) {
              socket.emit('updated', {
                id: comment.id,
                x: comment.x,
                y: comment.y
              });
              return socket.broadcast.emit('updated', {
                id: comment.id,
                x: comment.x,
                y: comment.y
              });
            } else {
              return console.log(err);
            }
          });
        } else {
          return console.log(err);
        }
      });
    }
  });
});
